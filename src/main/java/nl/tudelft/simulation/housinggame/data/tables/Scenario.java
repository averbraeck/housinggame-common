/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.ScenarioRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scenario extends TableImpl<ScenarioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.scenario</code>
     */
    public static final Scenario SCENARIO = new Scenario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScenarioRecord> getRecordType() {
        return ScenarioRecord.class;
    }

    /**
     * The column <code>housinggame.scenario.id</code>.
     */
    public final TableField<ScenarioRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.scenario.name</code>.
     */
    public final TableField<ScenarioRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>housinggame.scenario.information_amount</code>.
     */
    public final TableField<ScenarioRecord, Integer> INFORMATION_AMOUNT = createField(DSL.name("information_amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.scenario.scenarioparameters_id</code>.
     */
    public final TableField<ScenarioRecord, UInteger> SCENARIOPARAMETERS_ID = createField(DSL.name("scenarioparameters_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.scenario.gameversion_id</code>.
     */
    public final TableField<ScenarioRecord, UInteger> GAMEVERSION_ID = createField(DSL.name("gameversion_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private Scenario(Name alias, Table<ScenarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scenario(Name alias, Table<ScenarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.scenario</code> table reference
     */
    public Scenario(String alias) {
        this(DSL.name(alias), SCENARIO);
    }

    /**
     * Create an aliased <code>housinggame.scenario</code> table reference
     */
    public Scenario(Name alias) {
        this(alias, SCENARIO);
    }

    /**
     * Create a <code>housinggame.scenario</code> table reference
     */
    public Scenario() {
        this(DSL.name("scenario"), null);
    }

    public <O extends Record> Scenario(Table<O> child, ForeignKey<O, ScenarioRecord> key) {
        super(child, key, SCENARIO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SCENARIO_FK_SCENARIO_GAMEVERSION1_IDX, Indexes.SCENARIO_FK_SCENARIO_SCENARIOPARAMETERS1_IDX);
    }

    @Override
    public Identity<ScenarioRecord, UInteger> getIdentity() {
        return (Identity<ScenarioRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScenarioRecord> getPrimaryKey() {
        return Keys.KEY_SCENARIO_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScenarioRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCENARIO_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ScenarioRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SCENARIO_SCENARIOPARAMETERS1, Keys.FK_SCENARIO_GAMEVERSION1);
    }

    private transient Scenarioparameters _scenarioparameters;
    private transient Gameversion _gameversion;

    /**
     * Get the implicit join path to the
     * <code>housinggame.scenarioparameters</code> table.
     */
    public Scenarioparameters scenarioparameters() {
        if (_scenarioparameters == null)
            _scenarioparameters = new Scenarioparameters(this, Keys.FK_SCENARIO_SCENARIOPARAMETERS1);

        return _scenarioparameters;
    }

    /**
     * Get the implicit join path to the <code>housinggame.gameversion</code>
     * table.
     */
    public Gameversion gameversion() {
        if (_gameversion == null)
            _gameversion = new Gameversion(this, Keys.FK_SCENARIO_GAMEVERSION1);

        return _gameversion;
    }

    @Override
    public Scenario as(String alias) {
        return new Scenario(DSL.name(alias), this);
    }

    @Override
    public Scenario as(Name alias) {
        return new Scenario(alias, this);
    }

    @Override
    public Scenario as(Table<?> alias) {
        return new Scenario(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenario rename(String name) {
        return new Scenario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenario rename(Name name) {
        return new Scenario(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenario rename(Table<?> name) {
        return new Scenario(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UInteger, String, Integer, UInteger, UInteger> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UInteger, ? super String, ? super Integer, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UInteger, ? super String, ? super Integer, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
