/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.HousemeasureRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Housemeasure extends TableImpl<HousemeasureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.housemeasure</code>
     */
    public static final Housemeasure HOUSEMEASURE = new Housemeasure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HousemeasureRecord> getRecordType() {
        return HousemeasureRecord.class;
    }

    /**
     * The column <code>housinggame.housemeasure.id</code>.
     */
    public final TableField<HousemeasureRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.housemeasure.round_number</code>.
     */
    public final TableField<HousemeasureRecord, Integer> ROUND_NUMBER = createField(DSL.name("round_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housemeasure.measuretype_id</code>.
     */
    public final TableField<HousemeasureRecord, Integer> MEASURETYPE_ID = createField(DSL.name("measuretype_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housemeasure.housegroup_id</code>.
     */
    public final TableField<HousemeasureRecord, Integer> HOUSEGROUP_ID = createField(DSL.name("housegroup_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Housemeasure(Name alias, Table<HousemeasureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Housemeasure(Name alias, Table<HousemeasureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.housemeasure</code> table reference
     */
    public Housemeasure(String alias) {
        this(DSL.name(alias), HOUSEMEASURE);
    }

    /**
     * Create an aliased <code>housinggame.housemeasure</code> table reference
     */
    public Housemeasure(Name alias) {
        this(alias, HOUSEMEASURE);
    }

    /**
     * Create a <code>housinggame.housemeasure</code> table reference
     */
    public Housemeasure() {
        this(DSL.name("housemeasure"), null);
    }

    public <O extends Record> Housemeasure(Table<O> child, ForeignKey<O, HousemeasureRecord> key) {
        super(child, key, HOUSEMEASURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOUSEMEASURE_FK_MEASURE_HOUSEROUND1_IDX, Indexes.HOUSEMEASURE_FK_MEASURE_MEASURETYPE1_IDX);
    }

    @Override
    public Identity<HousemeasureRecord, Integer> getIdentity() {
        return (Identity<HousemeasureRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HousemeasureRecord> getPrimaryKey() {
        return Keys.KEY_HOUSEMEASURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<HousemeasureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HOUSEMEASURE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HousemeasureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_MEASURE_MEASURETYPE1, Keys.FK_MEASURE_HOUSEROUND1);
    }

    private transient Measuretype _measuretype;
    private transient Housegroup _housegroup;

    /**
     * Get the implicit join path to the <code>housinggame.measuretype</code>
     * table.
     */
    public Measuretype measuretype() {
        if (_measuretype == null)
            _measuretype = new Measuretype(this, Keys.FK_MEASURE_MEASURETYPE1);

        return _measuretype;
    }

    /**
     * Get the implicit join path to the <code>housinggame.housegroup</code>
     * table.
     */
    public Housegroup housegroup() {
        if (_housegroup == null)
            _housegroup = new Housegroup(this, Keys.FK_MEASURE_HOUSEROUND1);

        return _housegroup;
    }

    @Override
    public Housemeasure as(String alias) {
        return new Housemeasure(DSL.name(alias), this);
    }

    @Override
    public Housemeasure as(Name alias) {
        return new Housemeasure(alias, this);
    }

    @Override
    public Housemeasure as(Table<?> alias) {
        return new Housemeasure(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Housemeasure rename(String name) {
        return new Housemeasure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Housemeasure rename(Name name) {
        return new Housemeasure(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Housemeasure rename(Table<?> name) {
        return new Housemeasure(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
