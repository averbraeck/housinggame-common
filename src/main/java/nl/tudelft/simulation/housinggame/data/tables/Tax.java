/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.TaxRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tax extends TableImpl<TaxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.tax</code>
     */
    public static final Tax TAX = new Tax();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxRecord> getRecordType() {
        return TaxRecord.class;
    }

    /**
     * The column <code>housinggame.tax.id</code>.
     */
    public final TableField<TaxRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.tax.name</code>.
     */
    public final TableField<TaxRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>housinggame.tax.minimum_inhabitants</code>.
     */
    public final TableField<TaxRecord, UInteger> MINIMUM_INHABITANTS = createField(DSL.name("minimum_inhabitants"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.tax.maximum_inhabitants</code>.
     */
    public final TableField<TaxRecord, UInteger> MAXIMUM_INHABITANTS = createField(DSL.name("maximum_inhabitants"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.tax.tax_cost</code>.
     */
    public final TableField<TaxRecord, Double> TAX_COST = createField(DSL.name("tax_cost"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>housinggame.tax.community_id</code>.
     */
    public final TableField<TaxRecord, UInteger> COMMUNITY_ID = createField(DSL.name("community_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private Tax(Name alias, Table<TaxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tax(Name alias, Table<TaxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.tax</code> table reference
     */
    public Tax(String alias) {
        this(DSL.name(alias), TAX);
    }

    /**
     * Create an aliased <code>housinggame.tax</code> table reference
     */
    public Tax(Name alias) {
        this(alias, TAX);
    }

    /**
     * Create a <code>housinggame.tax</code> table reference
     */
    public Tax() {
        this(DSL.name("tax"), null);
    }

    public <O extends Record> Tax(Table<O> child, ForeignKey<O, TaxRecord> key) {
        super(child, key, TAX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TAX_FK_TAX_COMMUNITY1_IDX);
    }

    @Override
    public Identity<TaxRecord, UInteger> getIdentity() {
        return (Identity<TaxRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaxRecord> getPrimaryKey() {
        return Keys.KEY_TAX_PRIMARY;
    }

    @Override
    public List<UniqueKey<TaxRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TAX_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<TaxRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TAX_COMMUNITY1);
    }

    private transient Community _community;

    /**
     * Get the implicit join path to the <code>housinggame.community</code>
     * table.
     */
    public Community community() {
        if (_community == null)
            _community = new Community(this, Keys.FK_TAX_COMMUNITY1);

        return _community;
    }

    @Override
    public Tax as(String alias) {
        return new Tax(DSL.name(alias), this);
    }

    @Override
    public Tax as(Name alias) {
        return new Tax(alias, this);
    }

    @Override
    public Tax as(Table<?> alias) {
        return new Tax(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tax rename(String name) {
        return new Tax(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tax rename(Name name) {
        return new Tax(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tax rename(Table<?> name) {
        return new Tax(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, String, UInteger, UInteger, Double, UInteger> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UInteger, ? super String, ? super UInteger, ? super UInteger, ? super Double, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UInteger, ? super String, ? super UInteger, ? super UInteger, ? super Double, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
