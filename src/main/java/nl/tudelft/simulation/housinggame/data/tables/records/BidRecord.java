/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables.records;


import nl.tudelft.simulation.housinggame.data.tables.Bid;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BidRecord extends UpdatableRecordImpl<BidRecord> implements Record4<UInteger, Integer, UInteger, UInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>housinggame.bid.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>housinggame.bid.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>housinggame.bid.price</code>.
     */
    public void setPrice(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>housinggame.bid.price</code>.
     */
    public Integer getPrice() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>housinggame.bid.groupround_id</code>.
     */
    public void setGrouproundId(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>housinggame.bid.groupround_id</code>.
     */
    public UInteger getGrouproundId() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>housinggame.bid.house_id</code>.
     */
    public void setHouseId(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>housinggame.bid.house_id</code>.
     */
    public UInteger getHouseId() {
        return (UInteger) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, Integer, UInteger, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UInteger, Integer, UInteger, UInteger> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Bid.BID.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Bid.BID.PRICE;
    }

    @Override
    public Field<UInteger> field3() {
        return Bid.BID.GROUPROUND_ID;
    }

    @Override
    public Field<UInteger> field4() {
        return Bid.BID.HOUSE_ID;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getPrice();
    }

    @Override
    public UInteger component3() {
        return getGrouproundId();
    }

    @Override
    public UInteger component4() {
        return getHouseId();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getPrice();
    }

    @Override
    public UInteger value3() {
        return getGrouproundId();
    }

    @Override
    public UInteger value4() {
        return getHouseId();
    }

    @Override
    public BidRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public BidRecord value2(Integer value) {
        setPrice(value);
        return this;
    }

    @Override
    public BidRecord value3(UInteger value) {
        setGrouproundId(value);
        return this;
    }

    @Override
    public BidRecord value4(UInteger value) {
        setHouseId(value);
        return this;
    }

    @Override
    public BidRecord values(UInteger value1, Integer value2, UInteger value3, UInteger value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BidRecord
     */
    public BidRecord() {
        super(Bid.BID);
    }

    /**
     * Create a detached, initialised BidRecord
     */
    public BidRecord(UInteger id, Integer price, UInteger grouproundId, UInteger houseId) {
        super(Bid.BID);

        setId(id);
        setPrice(price);
        setGrouproundId(grouproundId);
        setHouseId(houseId);
        resetChangedOnNotNull();
    }
}
