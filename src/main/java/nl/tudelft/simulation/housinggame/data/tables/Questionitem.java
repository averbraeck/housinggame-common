/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.QuestionitemRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Questionitem extends TableImpl<QuestionitemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.questionitem</code>
     */
    public static final Questionitem QUESTIONITEM = new Questionitem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionitemRecord> getRecordType() {
        return QuestionitemRecord.class;
    }

    /**
     * The column <code>housinggame.questionitem.id</code>.
     */
    public final TableField<QuestionitemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.questionitem.code</code>.
     */
    public final TableField<QuestionitemRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>housinggame.questionitem.name</code>.
     */
    public final TableField<QuestionitemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>housinggame.questionitem.question_id</code>.
     */
    public final TableField<QuestionitemRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Questionitem(Name alias, Table<QuestionitemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Questionitem(Name alias, Table<QuestionitemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.questionitem</code> table reference
     */
    public Questionitem(String alias) {
        this(DSL.name(alias), QUESTIONITEM);
    }

    /**
     * Create an aliased <code>housinggame.questionitem</code> table reference
     */
    public Questionitem(Name alias) {
        this(alias, QUESTIONITEM);
    }

    /**
     * Create a <code>housinggame.questionitem</code> table reference
     */
    public Questionitem() {
        this(DSL.name("questionitem"), null);
    }

    public <O extends Record> Questionitem(Table<O> child, ForeignKey<O, QuestionitemRecord> key) {
        super(child, key, QUESTIONITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QUESTIONITEM_FK_QUESTIONITEM_QUESTION1_IDX);
    }

    @Override
    public Identity<QuestionitemRecord, Integer> getIdentity() {
        return (Identity<QuestionitemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuestionitemRecord> getPrimaryKey() {
        return Keys.KEY_QUESTIONITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<QuestionitemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_QUESTIONITEM_ID_UNIQUE, Keys.KEY_QUESTIONITEM_CODE_UNIQUE);
    }

    @Override
    public List<ForeignKey<QuestionitemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_QUESTIONITEM_QUESTION1);
    }

    private transient Question _question;

    /**
     * Get the implicit join path to the <code>housinggame.question</code>
     * table.
     */
    public Question question() {
        if (_question == null)
            _question = new Question(this, Keys.FK_QUESTIONITEM_QUESTION1);

        return _question;
    }

    @Override
    public Questionitem as(String alias) {
        return new Questionitem(DSL.name(alias), this);
    }

    @Override
    public Questionitem as(Name alias) {
        return new Questionitem(alias, this);
    }

    @Override
    public Questionitem as(Table<?> alias) {
        return new Questionitem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionitem rename(String name) {
        return new Questionitem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionitem rename(Name name) {
        return new Questionitem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Questionitem rename(Table<?> name) {
        return new Questionitem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
