/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables.records;


import nl.tudelft.simulation.housinggame.data.tables.Scenarioparameters;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScenarioparametersRecord extends UpdatableRecordImpl<ScenarioparametersRecord> implements Record18<UInteger, String, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, Double, UInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>housinggame.scenarioparameters.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>housinggame.scenarioparameters.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>housinggame.scenarioparameters.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>housinggame.scenarioparameters.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.pluvial_repair_costs_per_damage_point</code>.
     */
    public void setPluvialRepairCostsPerDamagePoint(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.pluvial_repair_costs_per_damage_point</code>.
     */
    public UInteger getPluvialRepairCostsPerDamagePoint() {
        return (UInteger) get(2);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.fluvial_repair_costs_per_damage_point</code>.
     */
    public void setFluvialRepairCostsPerDamagePoint(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.fluvial_repair_costs_per_damage_point</code>.
     */
    public UInteger getFluvialRepairCostsPerDamagePoint() {
        return (UInteger) get(3);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_if_area_flooded</code>.
     */
    public void setPluvialSatisfactionPenaltyIfAreaFlooded(UInteger value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_if_area_flooded</code>.
     */
    public UInteger getPluvialSatisfactionPenaltyIfAreaFlooded() {
        return (UInteger) get(4);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.pluvial_repair_costs_fixed</code>.
     */
    public void setPluvialRepairCostsFixed(UInteger value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.pluvial_repair_costs_fixed</code>.
     */
    public UInteger getPluvialRepairCostsFixed() {
        return (UInteger) get(5);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.fluvial_repair_costs_fixed</code>.
     */
    public void setFluvialRepairCostsFixed(UInteger value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.fluvial_repair_costs_fixed</code>.
     */
    public UInteger getFluvialRepairCostsFixed() {
        return (UInteger) get(6);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_if_area_flooded</code>.
     */
    public void setFluvialSatisfactionPenaltyIfAreaFlooded(UInteger value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_if_area_flooded</code>.
     */
    public UInteger getFluvialSatisfactionPenaltyIfAreaFlooded() {
        return (UInteger) get(7);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_house_flooded_fixed</code>.
     */
    public void setPluvialSatisfactionPenaltyHouseFloodedFixed(UInteger value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_house_flooded_fixed</code>.
     */
    public UInteger getPluvialSatisfactionPenaltyHouseFloodedFixed() {
        return (UInteger) get(8);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_house_flooded_fixed</code>.
     */
    public void setFluvialSatisfactionPenaltyHouseFloodedFixed(UInteger value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_house_flooded_fixed</code>.
     */
    public UInteger getFluvialSatisfactionPenaltyHouseFloodedFixed() {
        return (UInteger) get(9);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_per_damage_point</code>.
     */
    public void setPluvialSatisfactionPenaltyPerDamagePoint(UInteger value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_per_damage_point</code>.
     */
    public UInteger getPluvialSatisfactionPenaltyPerDamagePoint() {
        return (UInteger) get(10);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_per_damage_point</code>.
     */
    public void setFluvialSatisfactionPenaltyPerDamagePoint(UInteger value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_per_damage_point</code>.
     */
    public UInteger getFluvialSatisfactionPenaltyPerDamagePoint() {
        return (UInteger) get(11);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.satisfaction_debt_penalty</code>.
     */
    public void setSatisfactionDebtPenalty(UInteger value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.satisfaction_debt_penalty</code>.
     */
    public UInteger getSatisfactionDebtPenalty() {
        return (UInteger) get(12);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_too_low_fixed</code>.
     */
    public void setSatisfactionHouseRatingTooLowFixed(UInteger value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_too_low_fixed</code>.
     */
    public UInteger getSatisfactionHouseRatingTooLowFixed() {
        return (UInteger) get(13);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_too_low_per_delta</code>.
     */
    public void setSatisfactionHouseRatingTooLowPerDelta(UInteger value) {
        set(14, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_too_low_per_delta</code>.
     */
    public UInteger getSatisfactionHouseRatingTooLowPerDelta() {
        return (UInteger) get(14);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.satisfaction_move_penalty</code>.
     */
    public void setSatisfactionMovePenalty(UInteger value) {
        set(15, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.satisfaction_move_penalty</code>.
     */
    public UInteger getSatisfactionMovePenalty() {
        return (UInteger) get(15);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.mortgage_percentage</code>.
     */
    public void setMortgagePercentage(Double value) {
        set(16, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.mortgage_percentage</code>.
     */
    public Double getMortgagePercentage() {
        return (Double) get(16);
    }

    /**
     * Setter for
     * <code>housinggame.scenarioparameters.default_language_id</code>.
     */
    public void setDefaultLanguageId(UInteger value) {
        set(17, value);
    }

    /**
     * Getter for
     * <code>housinggame.scenarioparameters.default_language_id</code>.
     */
    public UInteger getDefaultLanguageId() {
        return (UInteger) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<UInteger, String, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, Double, UInteger> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<UInteger, String, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, UInteger, Double, UInteger> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Scenarioparameters.SCENARIOPARAMETERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Scenarioparameters.SCENARIOPARAMETERS.NAME;
    }

    @Override
    public Field<UInteger> field3() {
        return Scenarioparameters.SCENARIOPARAMETERS.PLUVIAL_REPAIR_COSTS_PER_DAMAGE_POINT;
    }

    @Override
    public Field<UInteger> field4() {
        return Scenarioparameters.SCENARIOPARAMETERS.FLUVIAL_REPAIR_COSTS_PER_DAMAGE_POINT;
    }

    @Override
    public Field<UInteger> field5() {
        return Scenarioparameters.SCENARIOPARAMETERS.PLUVIAL_SATISFACTION_PENALTY_IF_AREA_FLOODED;
    }

    @Override
    public Field<UInteger> field6() {
        return Scenarioparameters.SCENARIOPARAMETERS.PLUVIAL_REPAIR_COSTS_FIXED;
    }

    @Override
    public Field<UInteger> field7() {
        return Scenarioparameters.SCENARIOPARAMETERS.FLUVIAL_REPAIR_COSTS_FIXED;
    }

    @Override
    public Field<UInteger> field8() {
        return Scenarioparameters.SCENARIOPARAMETERS.FLUVIAL_SATISFACTION_PENALTY_IF_AREA_FLOODED;
    }

    @Override
    public Field<UInteger> field9() {
        return Scenarioparameters.SCENARIOPARAMETERS.PLUVIAL_SATISFACTION_PENALTY_HOUSE_FLOODED_FIXED;
    }

    @Override
    public Field<UInteger> field10() {
        return Scenarioparameters.SCENARIOPARAMETERS.FLUVIAL_SATISFACTION_PENALTY_HOUSE_FLOODED_FIXED;
    }

    @Override
    public Field<UInteger> field11() {
        return Scenarioparameters.SCENARIOPARAMETERS.PLUVIAL_SATISFACTION_PENALTY_PER_DAMAGE_POINT;
    }

    @Override
    public Field<UInteger> field12() {
        return Scenarioparameters.SCENARIOPARAMETERS.FLUVIAL_SATISFACTION_PENALTY_PER_DAMAGE_POINT;
    }

    @Override
    public Field<UInteger> field13() {
        return Scenarioparameters.SCENARIOPARAMETERS.SATISFACTION_DEBT_PENALTY;
    }

    @Override
    public Field<UInteger> field14() {
        return Scenarioparameters.SCENARIOPARAMETERS.SATISFACTION_HOUSE_RATING_TOO_LOW_FIXED;
    }

    @Override
    public Field<UInteger> field15() {
        return Scenarioparameters.SCENARIOPARAMETERS.SATISFACTION_HOUSE_RATING_TOO_LOW_PER_DELTA;
    }

    @Override
    public Field<UInteger> field16() {
        return Scenarioparameters.SCENARIOPARAMETERS.SATISFACTION_MOVE_PENALTY;
    }

    @Override
    public Field<Double> field17() {
        return Scenarioparameters.SCENARIOPARAMETERS.MORTGAGE_PERCENTAGE;
    }

    @Override
    public Field<UInteger> field18() {
        return Scenarioparameters.SCENARIOPARAMETERS.DEFAULT_LANGUAGE_ID;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UInteger component3() {
        return getPluvialRepairCostsPerDamagePoint();
    }

    @Override
    public UInteger component4() {
        return getFluvialRepairCostsPerDamagePoint();
    }

    @Override
    public UInteger component5() {
        return getPluvialSatisfactionPenaltyIfAreaFlooded();
    }

    @Override
    public UInteger component6() {
        return getPluvialRepairCostsFixed();
    }

    @Override
    public UInteger component7() {
        return getFluvialRepairCostsFixed();
    }

    @Override
    public UInteger component8() {
        return getFluvialSatisfactionPenaltyIfAreaFlooded();
    }

    @Override
    public UInteger component9() {
        return getPluvialSatisfactionPenaltyHouseFloodedFixed();
    }

    @Override
    public UInteger component10() {
        return getFluvialSatisfactionPenaltyHouseFloodedFixed();
    }

    @Override
    public UInteger component11() {
        return getPluvialSatisfactionPenaltyPerDamagePoint();
    }

    @Override
    public UInteger component12() {
        return getFluvialSatisfactionPenaltyPerDamagePoint();
    }

    @Override
    public UInteger component13() {
        return getSatisfactionDebtPenalty();
    }

    @Override
    public UInteger component14() {
        return getSatisfactionHouseRatingTooLowFixed();
    }

    @Override
    public UInteger component15() {
        return getSatisfactionHouseRatingTooLowPerDelta();
    }

    @Override
    public UInteger component16() {
        return getSatisfactionMovePenalty();
    }

    @Override
    public Double component17() {
        return getMortgagePercentage();
    }

    @Override
    public UInteger component18() {
        return getDefaultLanguageId();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public UInteger value3() {
        return getPluvialRepairCostsPerDamagePoint();
    }

    @Override
    public UInteger value4() {
        return getFluvialRepairCostsPerDamagePoint();
    }

    @Override
    public UInteger value5() {
        return getPluvialSatisfactionPenaltyIfAreaFlooded();
    }

    @Override
    public UInteger value6() {
        return getPluvialRepairCostsFixed();
    }

    @Override
    public UInteger value7() {
        return getFluvialRepairCostsFixed();
    }

    @Override
    public UInteger value8() {
        return getFluvialSatisfactionPenaltyIfAreaFlooded();
    }

    @Override
    public UInteger value9() {
        return getPluvialSatisfactionPenaltyHouseFloodedFixed();
    }

    @Override
    public UInteger value10() {
        return getFluvialSatisfactionPenaltyHouseFloodedFixed();
    }

    @Override
    public UInteger value11() {
        return getPluvialSatisfactionPenaltyPerDamagePoint();
    }

    @Override
    public UInteger value12() {
        return getFluvialSatisfactionPenaltyPerDamagePoint();
    }

    @Override
    public UInteger value13() {
        return getSatisfactionDebtPenalty();
    }

    @Override
    public UInteger value14() {
        return getSatisfactionHouseRatingTooLowFixed();
    }

    @Override
    public UInteger value15() {
        return getSatisfactionHouseRatingTooLowPerDelta();
    }

    @Override
    public UInteger value16() {
        return getSatisfactionMovePenalty();
    }

    @Override
    public Double value17() {
        return getMortgagePercentage();
    }

    @Override
    public UInteger value18() {
        return getDefaultLanguageId();
    }

    @Override
    public ScenarioparametersRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value3(UInteger value) {
        setPluvialRepairCostsPerDamagePoint(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value4(UInteger value) {
        setFluvialRepairCostsPerDamagePoint(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value5(UInteger value) {
        setPluvialSatisfactionPenaltyIfAreaFlooded(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value6(UInteger value) {
        setPluvialRepairCostsFixed(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value7(UInteger value) {
        setFluvialRepairCostsFixed(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value8(UInteger value) {
        setFluvialSatisfactionPenaltyIfAreaFlooded(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value9(UInteger value) {
        setPluvialSatisfactionPenaltyHouseFloodedFixed(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value10(UInteger value) {
        setFluvialSatisfactionPenaltyHouseFloodedFixed(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value11(UInteger value) {
        setPluvialSatisfactionPenaltyPerDamagePoint(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value12(UInteger value) {
        setFluvialSatisfactionPenaltyPerDamagePoint(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value13(UInteger value) {
        setSatisfactionDebtPenalty(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value14(UInteger value) {
        setSatisfactionHouseRatingTooLowFixed(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value15(UInteger value) {
        setSatisfactionHouseRatingTooLowPerDelta(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value16(UInteger value) {
        setSatisfactionMovePenalty(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value17(Double value) {
        setMortgagePercentage(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord value18(UInteger value) {
        setDefaultLanguageId(value);
        return this;
    }

    @Override
    public ScenarioparametersRecord values(UInteger value1, String value2, UInteger value3, UInteger value4, UInteger value5, UInteger value6, UInteger value7, UInteger value8, UInteger value9, UInteger value10, UInteger value11, UInteger value12, UInteger value13, UInteger value14, UInteger value15, UInteger value16, Double value17, UInteger value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScenarioparametersRecord
     */
    public ScenarioparametersRecord() {
        super(Scenarioparameters.SCENARIOPARAMETERS);
    }

    /**
     * Create a detached, initialised ScenarioparametersRecord
     */
    public ScenarioparametersRecord(UInteger id, String name, UInteger pluvialRepairCostsPerDamagePoint, UInteger fluvialRepairCostsPerDamagePoint, UInteger pluvialSatisfactionPenaltyIfAreaFlooded, UInteger pluvialRepairCostsFixed, UInteger fluvialRepairCostsFixed, UInteger fluvialSatisfactionPenaltyIfAreaFlooded, UInteger pluvialSatisfactionPenaltyHouseFloodedFixed, UInteger fluvialSatisfactionPenaltyHouseFloodedFixed, UInteger pluvialSatisfactionPenaltyPerDamagePoint, UInteger fluvialSatisfactionPenaltyPerDamagePoint, UInteger satisfactionDebtPenalty, UInteger satisfactionHouseRatingTooLowFixed, UInteger satisfactionHouseRatingTooLowPerDelta, UInteger satisfactionMovePenalty, Double mortgagePercentage, UInteger defaultLanguageId) {
        super(Scenarioparameters.SCENARIOPARAMETERS);

        setId(id);
        setName(name);
        setPluvialRepairCostsPerDamagePoint(pluvialRepairCostsPerDamagePoint);
        setFluvialRepairCostsPerDamagePoint(fluvialRepairCostsPerDamagePoint);
        setPluvialSatisfactionPenaltyIfAreaFlooded(pluvialSatisfactionPenaltyIfAreaFlooded);
        setPluvialRepairCostsFixed(pluvialRepairCostsFixed);
        setFluvialRepairCostsFixed(fluvialRepairCostsFixed);
        setFluvialSatisfactionPenaltyIfAreaFlooded(fluvialSatisfactionPenaltyIfAreaFlooded);
        setPluvialSatisfactionPenaltyHouseFloodedFixed(pluvialSatisfactionPenaltyHouseFloodedFixed);
        setFluvialSatisfactionPenaltyHouseFloodedFixed(fluvialSatisfactionPenaltyHouseFloodedFixed);
        setPluvialSatisfactionPenaltyPerDamagePoint(pluvialSatisfactionPenaltyPerDamagePoint);
        setFluvialSatisfactionPenaltyPerDamagePoint(fluvialSatisfactionPenaltyPerDamagePoint);
        setSatisfactionDebtPenalty(satisfactionDebtPenalty);
        setSatisfactionHouseRatingTooLowFixed(satisfactionHouseRatingTooLowFixed);
        setSatisfactionHouseRatingTooLowPerDelta(satisfactionHouseRatingTooLowPerDelta);
        setSatisfactionMovePenalty(satisfactionMovePenalty);
        setMortgagePercentage(mortgagePercentage);
        setDefaultLanguageId(defaultLanguageId);
        resetChangedOnNotNull();
    }
}
