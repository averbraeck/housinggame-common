/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.GrouproundRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groupround extends TableImpl<GrouproundRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.groupround</code>
     */
    public static final Groupround GROUPROUND = new Groupround();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GrouproundRecord> getRecordType() {
        return GrouproundRecord.class;
    }

    /**
     * The column <code>housinggame.groupround.id</code>.
     */
    public final TableField<GrouproundRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.groupround.pluvial_flood_intensity</code>.
     */
    public final TableField<GrouproundRecord, Integer> PLUVIAL_FLOOD_INTENSITY = createField(DSL.name("pluvial_flood_intensity"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>housinggame.groupround.fluvial_flood_intensity</code>.
     */
    public final TableField<GrouproundRecord, Integer> FLUVIAL_FLOOD_INTENSITY = createField(DSL.name("fluvial_flood_intensity"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>housinggame.groupround.start_time</code>.
     */
    public final TableField<GrouproundRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>housinggame.groupround.group_id</code>.
     */
    public final TableField<GrouproundRecord, UInteger> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.groupround.round_id</code>.
     */
    public final TableField<GrouproundRecord, UInteger> ROUND_ID = createField(DSL.name("round_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private Groupround(Name alias, Table<GrouproundRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groupround(Name alias, Table<GrouproundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.groupround</code> table reference
     */
    public Groupround(String alias) {
        this(DSL.name(alias), GROUPROUND);
    }

    /**
     * Create an aliased <code>housinggame.groupround</code> table reference
     */
    public Groupround(Name alias) {
        this(alias, GROUPROUND);
    }

    /**
     * Create a <code>housinggame.groupround</code> table reference
     */
    public Groupround() {
        this(DSL.name("groupround"), null);
    }

    public <O extends Record> Groupround(Table<O> child, ForeignKey<O, GrouproundRecord> key) {
        super(child, key, GROUPROUND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GROUPROUND_FK_GROUPROUND_GROUP1_IDX, Indexes.GROUPROUND_FK_GROUPROUND_ROUND1_IDX);
    }

    @Override
    public Identity<GrouproundRecord, UInteger> getIdentity() {
        return (Identity<GrouproundRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<GrouproundRecord> getPrimaryKey() {
        return Keys.KEY_GROUPROUND_PRIMARY;
    }

    @Override
    public List<UniqueKey<GrouproundRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GROUPROUND_ID_UNIQUE, Keys.KEY_GROUPROUND_ID_GROUP_ROUND);
    }

    @Override
    public List<ForeignKey<GrouproundRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GROUPROUND_GROUP1, Keys.FK_GROUPROUND_ROUND1);
    }

    private transient Group _group;
    private transient Round _round;

    /**
     * Get the implicit join path to the <code>housinggame.group</code> table.
     */
    public Group group() {
        if (_group == null)
            _group = new Group(this, Keys.FK_GROUPROUND_GROUP1);

        return _group;
    }

    /**
     * Get the implicit join path to the <code>housinggame.round</code> table.
     */
    public Round round() {
        if (_round == null)
            _round = new Round(this, Keys.FK_GROUPROUND_ROUND1);

        return _round;
    }

    @Override
    public Groupround as(String alias) {
        return new Groupround(DSL.name(alias), this);
    }

    @Override
    public Groupround as(Name alias) {
        return new Groupround(alias, this);
    }

    @Override
    public Groupround as(Table<?> alias) {
        return new Groupround(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupround rename(String name) {
        return new Groupround(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupround rename(Name name) {
        return new Groupround(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupround rename(Table<?> name) {
        return new Groupround(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UInteger, Integer, Integer, LocalDateTime, UInteger, UInteger> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UInteger, ? super Integer, ? super Integer, ? super LocalDateTime, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UInteger, ? super Integer, ? super Integer, ? super LocalDateTime, ? super UInteger, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
