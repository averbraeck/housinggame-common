/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.CommunityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Community extends TableImpl<CommunityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.community</code>
     */
    public static final Community COMMUNITY = new Community();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommunityRecord> getRecordType() {
        return CommunityRecord.class;
    }

    /**
     * The column <code>housinggame.community.id</code>.
     */
    public final TableField<CommunityRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.community.name</code>.
     */
    public final TableField<CommunityRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>housinggame.community.capacity</code>.
     */
    public final TableField<CommunityRecord, Integer> CAPACITY = createField(DSL.name("capacity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.community.fluvial_protection</code>.
     */
    public final TableField<CommunityRecord, Integer> FLUVIAL_PROTECTION = createField(DSL.name("fluvial_protection"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.community.pluvial_protection</code>.
     */
    public final TableField<CommunityRecord, Integer> PLUVIAL_PROTECTION = createField(DSL.name("pluvial_protection"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.community.gameversion_id</code>.
     */
    public final TableField<CommunityRecord, Integer> GAMEVERSION_ID = createField(DSL.name("gameversion_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Community(Name alias, Table<CommunityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Community(Name alias, Table<CommunityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.community</code> table reference
     */
    public Community(String alias) {
        this(DSL.name(alias), COMMUNITY);
    }

    /**
     * Create an aliased <code>housinggame.community</code> table reference
     */
    public Community(Name alias) {
        this(alias, COMMUNITY);
    }

    /**
     * Create a <code>housinggame.community</code> table reference
     */
    public Community() {
        this(DSL.name("community"), null);
    }

    public <O extends Record> Community(Table<O> child, ForeignKey<O, CommunityRecord> key) {
        super(child, key, COMMUNITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COMMUNITY_FK_COMMUNITY_GAMEVERSION1_IDX);
    }

    @Override
    public Identity<CommunityRecord, Integer> getIdentity() {
        return (Identity<CommunityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommunityRecord> getPrimaryKey() {
        return Keys.KEY_COMMUNITY_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommunityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COMMUNITY_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<CommunityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_COMMUNITY_GAMEVERSION1);
    }

    private transient Gameversion _gameversion;

    /**
     * Get the implicit join path to the <code>housinggame.gameversion</code>
     * table.
     */
    public Gameversion gameversion() {
        if (_gameversion == null)
            _gameversion = new Gameversion(this, Keys.FK_COMMUNITY_GAMEVERSION1);

        return _gameversion;
    }

    @Override
    public Community as(String alias) {
        return new Community(DSL.name(alias), this);
    }

    @Override
    public Community as(Name alias) {
        return new Community(alias, this);
    }

    @Override
    public Community as(Table<?> alias) {
        return new Community(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Community rename(String name) {
        return new Community(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Community rename(Name name) {
        return new Community(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Community rename(Table<?> name) {
        return new Community(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
