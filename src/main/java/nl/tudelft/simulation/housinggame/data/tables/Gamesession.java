/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.GamesessionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gamesession extends TableImpl<GamesessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.gamesession</code>
     */
    public static final Gamesession GAMESESSION = new Gamesession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GamesessionRecord> getRecordType() {
        return GamesessionRecord.class;
    }

    /**
     * The column <code>housinggame.gamesession.id</code>.
     */
    public final TableField<GamesessionRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.gamesession.name</code>.
     */
    public final TableField<GamesessionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>housinggame.gamesession.password</code>.
     */
    public final TableField<GamesessionRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>housinggame.gamesession.location</code>.
     */
    public final TableField<GamesessionRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>housinggame.gamesession.create_time</code>.
     */
    public final TableField<GamesessionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>housinggame.gamesession.date</code>.
     */
    public final TableField<GamesessionRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>housinggame.gamesession.start_time</code>.
     */
    public final TableField<GamesessionRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>housinggame.gamesession.end_time</code>.
     */
    public final TableField<GamesessionRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>housinggame.gamesession.gameversion_id</code>.
     */
    public final TableField<GamesessionRecord, UInteger> GAMEVERSION_ID = createField(DSL.name("gameversion_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private Gamesession(Name alias, Table<GamesessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gamesession(Name alias, Table<GamesessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.gamesession</code> table reference
     */
    public Gamesession(String alias) {
        this(DSL.name(alias), GAMESESSION);
    }

    /**
     * Create an aliased <code>housinggame.gamesession</code> table reference
     */
    public Gamesession(Name alias) {
        this(alias, GAMESESSION);
    }

    /**
     * Create a <code>housinggame.gamesession</code> table reference
     */
    public Gamesession() {
        this(DSL.name("gamesession"), null);
    }

    public <O extends Record> Gamesession(Table<O> child, ForeignKey<O, GamesessionRecord> key) {
        super(child, key, GAMESESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAMESESSION_FK_GAMESESSION_GAMEVERSION1_IDX);
    }

    @Override
    public Identity<GamesessionRecord, UInteger> getIdentity() {
        return (Identity<GamesessionRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<GamesessionRecord> getPrimaryKey() {
        return Keys.KEY_GAMESESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GamesessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAMESESSION_ID_UNIQUE, Keys.KEY_GAMESESSION_NAME_UNIQUE);
    }

    @Override
    public List<ForeignKey<GamesessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAMESESSION_GAMEVERSION1);
    }

    private transient Gameversion _gameversion;

    /**
     * Get the implicit join path to the <code>housinggame.gameversion</code>
     * table.
     */
    public Gameversion gameversion() {
        if (_gameversion == null)
            _gameversion = new Gameversion(this, Keys.FK_GAMESESSION_GAMEVERSION1);

        return _gameversion;
    }

    @Override
    public Gamesession as(String alias) {
        return new Gamesession(DSL.name(alias), this);
    }

    @Override
    public Gamesession as(Name alias) {
        return new Gamesession(alias, this);
    }

    @Override
    public Gamesession as(Table<?> alias) {
        return new Gamesession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gamesession rename(String name) {
        return new Gamesession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gamesession rename(Name name) {
        return new Gamesession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gamesession rename(Table<?> name) {
        return new Gamesession(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UInteger, String, String, String, LocalDateTime, LocalDate, LocalDateTime, LocalDateTime, UInteger> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super UInteger, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDate, ? super LocalDateTime, ? super LocalDateTime, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super UInteger, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDate, ? super LocalDateTime, ? super LocalDateTime, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
