/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.HouseroundRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Houseround extends TableImpl<HouseroundRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.houseround</code>
     */
    public static final Houseround HOUSEROUND = new Houseround();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseroundRecord> getRecordType() {
        return HouseroundRecord.class;
    }

    /**
     * The column <code>housinggame.houseround.id</code>.
     */
    public final TableField<HouseroundRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.houseround.bid_price</code>.
     */
    public final TableField<HouseroundRecord, Integer> BID_PRICE = createField(DSL.name("bid_price"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>housinggame.houseround.bid_explanation</code>.
     */
    public final TableField<HouseroundRecord, String> BID_EXPLANATION = createField(DSL.name("bid_explanation"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>housinggame.houseround.undamaged_price</code>.
     */
    public final TableField<HouseroundRecord, Integer> UNDAMAGED_PRICE = createField(DSL.name("undamaged_price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.houseround.damage_reduction</code>.
     */
    public final TableField<HouseroundRecord, Integer> DAMAGE_REDUCTION = createField(DSL.name("damage_reduction"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.houseround.house_satisfaction</code>.
     */
    public final TableField<HouseroundRecord, Integer> HOUSE_SATISFACTION = createField(DSL.name("house_satisfaction"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.houseround.groupround_id</code>.
     */
    public final TableField<HouseroundRecord, Integer> GROUPROUND_ID = createField(DSL.name("groupround_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.houseround.house_id</code>.
     */
    public final TableField<HouseroundRecord, Integer> HOUSE_ID = createField(DSL.name("house_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Houseround(Name alias, Table<HouseroundRecord> aliased) {
        this(alias, aliased, null);
    }

    private Houseround(Name alias, Table<HouseroundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.houseround</code> table reference
     */
    public Houseround(String alias) {
        this(DSL.name(alias), HOUSEROUND);
    }

    /**
     * Create an aliased <code>housinggame.houseround</code> table reference
     */
    public Houseround(Name alias) {
        this(alias, HOUSEROUND);
    }

    /**
     * Create a <code>housinggame.houseround</code> table reference
     */
    public Houseround() {
        this(DSL.name("houseround"), null);
    }

    public <O extends Record> Houseround(Table<O> child, ForeignKey<O, HouseroundRecord> key) {
        super(child, key, HOUSEROUND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOUSEROUND_FK_HOUSEROUND_GROUPROUND1_IDX, Indexes.HOUSEROUND_FK_HOUSEROUND_HOUSE1_IDX);
    }

    @Override
    public Identity<HouseroundRecord, Integer> getIdentity() {
        return (Identity<HouseroundRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HouseroundRecord> getPrimaryKey() {
        return Keys.KEY_HOUSEROUND_PRIMARY;
    }

    @Override
    public List<UniqueKey<HouseroundRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HOUSEROUND_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HouseroundRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_HOUSEROUND_GROUPROUND1, Keys.FK_HOUSEROUND_HOUSE1);
    }

    private transient Groupround _groupround;
    private transient House _house;

    /**
     * Get the implicit join path to the <code>housinggame.groupround</code>
     * table.
     */
    public Groupround groupround() {
        if (_groupround == null)
            _groupround = new Groupround(this, Keys.FK_HOUSEROUND_GROUPROUND1);

        return _groupround;
    }

    /**
     * Get the implicit join path to the <code>housinggame.house</code> table.
     */
    public House house() {
        if (_house == null)
            _house = new House(this, Keys.FK_HOUSEROUND_HOUSE1);

        return _house;
    }

    @Override
    public Houseround as(String alias) {
        return new Houseround(DSL.name(alias), this);
    }

    @Override
    public Houseround as(Name alias) {
        return new Houseround(alias, this);
    }

    @Override
    public Houseround as(Table<?> alias) {
        return new Houseround(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Houseround rename(String name) {
        return new Houseround(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Houseround rename(Name name) {
        return new Houseround(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Houseround rename(Table<?> name) {
        return new Houseround(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
