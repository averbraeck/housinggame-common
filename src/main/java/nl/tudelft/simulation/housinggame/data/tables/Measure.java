/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.MeasureRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measure extends TableImpl<MeasureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.measure</code>
     */
    public static final Measure MEASURE = new Measure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasureRecord> getRecordType() {
        return MeasureRecord.class;
    }

    /**
     * The column <code>housinggame.measure.id</code>.
     */
    public final TableField<MeasureRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.measure.value</code>.
     */
    public final TableField<MeasureRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>housinggame.measure.round_number</code>.
     */
    public final TableField<MeasureRecord, Integer> ROUND_NUMBER = createField(DSL.name("round_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.measure.consumed_in_round</code>.
     */
    public final TableField<MeasureRecord, Integer> CONSUMED_IN_ROUND = createField(DSL.name("consumed_in_round"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>housinggame.measure.measuretype_id</code>.
     */
    public final TableField<MeasureRecord, Integer> MEASURETYPE_ID = createField(DSL.name("measuretype_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.measure.housegroup_id</code>.
     */
    public final TableField<MeasureRecord, Integer> HOUSEGROUP_ID = createField(DSL.name("housegroup_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Measure(Name alias, Table<MeasureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measure(Name alias, Table<MeasureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.measure</code> table reference
     */
    public Measure(String alias) {
        this(DSL.name(alias), MEASURE);
    }

    /**
     * Create an aliased <code>housinggame.measure</code> table reference
     */
    public Measure(Name alias) {
        this(alias, MEASURE);
    }

    /**
     * Create a <code>housinggame.measure</code> table reference
     */
    public Measure() {
        this(DSL.name("measure"), null);
    }

    public <O extends Record> Measure(Table<O> child, ForeignKey<O, MeasureRecord> key) {
        super(child, key, MEASURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MEASURE_FK_MEASURE_HOUSEGROUP1_IDX, Indexes.MEASURE_FK_MEASURE_MEASURETYPE1_IDX);
    }

    @Override
    public Identity<MeasureRecord, Integer> getIdentity() {
        return (Identity<MeasureRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeasureRecord> getPrimaryKey() {
        return Keys.KEY_MEASURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MeasureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MEASURE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<MeasureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_MEASURE_MEASURETYPE1, Keys.FK_MEASURE_HOUSEGROUP1);
    }

    private transient Measuretype _measuretype;
    private transient Housegroup _housegroup;

    /**
     * Get the implicit join path to the <code>housinggame.measuretype</code>
     * table.
     */
    public Measuretype measuretype() {
        if (_measuretype == null)
            _measuretype = new Measuretype(this, Keys.FK_MEASURE_MEASURETYPE1);

        return _measuretype;
    }

    /**
     * Get the implicit join path to the <code>housinggame.housegroup</code>
     * table.
     */
    public Housegroup housegroup() {
        if (_housegroup == null)
            _housegroup = new Housegroup(this, Keys.FK_MEASURE_HOUSEGROUP1);

        return _housegroup;
    }

    @Override
    public Measure as(String alias) {
        return new Measure(DSL.name(alias), this);
    }

    @Override
    public Measure as(Name alias) {
        return new Measure(alias, this);
    }

    @Override
    public Measure as(Table<?> alias) {
        return new Measure(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measure rename(String name) {
        return new Measure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measure rename(Name name) {
        return new Measure(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measure rename(Table<?> name) {
        return new Measure(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Double, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Double, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Double, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
