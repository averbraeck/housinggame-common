/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.ScenarioparametersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scenarioparameters extends TableImpl<ScenarioparametersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.scenarioparameters</code>
     */
    public static final Scenarioparameters SCENARIOPARAMETERS = new Scenarioparameters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScenarioparametersRecord> getRecordType() {
        return ScenarioparametersRecord.class;
    }

    /**
     * The column <code>housinggame.scenarioparameters.id</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.scenarioparameters.name</code>.
     */
    public final TableField<ScenarioparametersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.pluvial_repair_costs_per_damage_point</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> PLUVIAL_REPAIR_COSTS_PER_DAMAGE_POINT = createField(DSL.name("pluvial_repair_costs_per_damage_point"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.fluvial_repair_costs_per_damage_point</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> FLUVIAL_REPAIR_COSTS_PER_DAMAGE_POINT = createField(DSL.name("fluvial_repair_costs_per_damage_point"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_if_area_flooded</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> PLUVIAL_SATISFACTION_PENALTY_IF_AREA_FLOODED = createField(DSL.name("pluvial_satisfaction_penalty_if_area_flooded"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.pluvial_repair_costs_fixed</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> PLUVIAL_REPAIR_COSTS_FIXED = createField(DSL.name("pluvial_repair_costs_fixed"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.fluvial_repair_costs_fixed</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> FLUVIAL_REPAIR_COSTS_FIXED = createField(DSL.name("fluvial_repair_costs_fixed"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_if_area_flooded</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> FLUVIAL_SATISFACTION_PENALTY_IF_AREA_FLOODED = createField(DSL.name("fluvial_satisfaction_penalty_if_area_flooded"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_house_flooded_fixed</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> PLUVIAL_SATISFACTION_PENALTY_HOUSE_FLOODED_FIXED = createField(DSL.name("pluvial_satisfaction_penalty_house_flooded_fixed"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_house_flooded_fixed</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> FLUVIAL_SATISFACTION_PENALTY_HOUSE_FLOODED_FIXED = createField(DSL.name("fluvial_satisfaction_penalty_house_flooded_fixed"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.pluvial_satisfaction_penalty_per_damage_point</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> PLUVIAL_SATISFACTION_PENALTY_PER_DAMAGE_POINT = createField(DSL.name("pluvial_satisfaction_penalty_per_damage_point"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.fluvial_satisfaction_penalty_per_damage_point</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> FLUVIAL_SATISFACTION_PENALTY_PER_DAMAGE_POINT = createField(DSL.name("fluvial_satisfaction_penalty_per_damage_point"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.satisfaction_debt_penalty</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> SATISFACTION_DEBT_PENALTY = createField(DSL.name("satisfaction_debt_penalty"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_too_low_fixed</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> SATISFACTION_HOUSE_RATING_TOO_LOW_FIXED = createField(DSL.name("satisfaction_house_rating_too_low_fixed"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_too_low_per_delta</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> SATISFACTION_HOUSE_RATING_TOO_LOW_PER_DELTA = createField(DSL.name("satisfaction_house_rating_too_low_per_delta"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.satisfaction_house_rating_per_round</code>.
     */
    public final TableField<ScenarioparametersRecord, Byte> SATISFACTION_HOUSE_RATING_PER_ROUND = createField(DSL.name("satisfaction_house_rating_per_round"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.satisfaction_move_penalty</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> SATISFACTION_MOVE_PENALTY = createField(DSL.name("satisfaction_move_penalty"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.mortgage_percentage</code>.
     */
    public final TableField<ScenarioparametersRecord, Double> MORTGAGE_PERCENTAGE = createField(DSL.name("mortgage_percentage"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.field(DSL.raw("10"), SQLDataType.FLOAT)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.allow_personal_satisfaction_neg</code>.
     */
    public final TableField<ScenarioparametersRecord, Byte> ALLOW_PERSONAL_SATISFACTION_NEG = createField(DSL.name("allow_personal_satisfaction_neg"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.allow_house_satisfaction_neg</code>.
     */
    public final TableField<ScenarioparametersRecord, Byte> ALLOW_HOUSE_SATISFACTION_NEG = createField(DSL.name("allow_house_satisfaction_neg"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.allow_total_satisfaction_neg</code>.
     */
    public final TableField<ScenarioparametersRecord, Byte> ALLOW_TOTAL_SATISFACTION_NEG = createField(DSL.name("allow_total_satisfaction_neg"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.highest_pluvial_score</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> HIGHEST_PLUVIAL_SCORE = createField(DSL.name("highest_pluvial_score"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("10"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.highest_fluvial_score</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> HIGHEST_FLUVIAL_SCORE = createField(DSL.name("highest_fluvial_score"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("12"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.news_discount_in_euros</code>.
     */
    public final TableField<ScenarioparametersRecord, Byte> NEWS_DISCOUNT_IN_EUROS = createField(DSL.name("news_discount_in_euros"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>housinggame.scenarioparameters.default_language_id</code>.
     */
    public final TableField<ScenarioparametersRecord, Integer> DEFAULT_LANGUAGE_ID = createField(DSL.name("default_language_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Scenarioparameters(Name alias, Table<ScenarioparametersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scenarioparameters(Name alias, Table<ScenarioparametersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.scenarioparameters</code> table
     * reference
     */
    public Scenarioparameters(String alias) {
        this(DSL.name(alias), SCENARIOPARAMETERS);
    }

    /**
     * Create an aliased <code>housinggame.scenarioparameters</code> table
     * reference
     */
    public Scenarioparameters(Name alias) {
        this(alias, SCENARIOPARAMETERS);
    }

    /**
     * Create a <code>housinggame.scenarioparameters</code> table reference
     */
    public Scenarioparameters() {
        this(DSL.name("scenarioparameters"), null);
    }

    public <O extends Record> Scenarioparameters(Table<O> child, ForeignKey<O, ScenarioparametersRecord> key) {
        super(child, key, SCENARIOPARAMETERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SCENARIOPARAMETERS_FK_SCENARIOPARAMETERS_LANGUAGE1_IDX);
    }

    @Override
    public Identity<ScenarioparametersRecord, Integer> getIdentity() {
        return (Identity<ScenarioparametersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScenarioparametersRecord> getPrimaryKey() {
        return Keys.KEY_SCENARIOPARAMETERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScenarioparametersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCENARIOPARAMETERS_ID_UNIQUE, Keys.KEY_SCENARIOPARAMETERS_NAME_UNIQUE);
    }

    @Override
    public List<ForeignKey<ScenarioparametersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SCENARIOPARAMETERS_LANGUAGE1);
    }

    private transient Language _language;

    /**
     * Get the implicit join path to the <code>housinggame.language</code>
     * table.
     */
    public Language language() {
        if (_language == null)
            _language = new Language(this, Keys.FK_SCENARIOPARAMETERS_LANGUAGE1);

        return _language;
    }

    @Override
    public Scenarioparameters as(String alias) {
        return new Scenarioparameters(DSL.name(alias), this);
    }

    @Override
    public Scenarioparameters as(Name alias) {
        return new Scenarioparameters(alias, this);
    }

    @Override
    public Scenarioparameters as(Table<?> alias) {
        return new Scenarioparameters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenarioparameters rename(String name) {
        return new Scenarioparameters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenarioparameters rename(Name name) {
        return new Scenarioparameters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scenarioparameters rename(Table<?> name) {
        return new Scenarioparameters(name.getQualifiedName(), null);
    }
}
