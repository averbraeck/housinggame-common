/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.PlayerstateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Playerstate extends TableImpl<PlayerstateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.playerstate</code>
     */
    public static final Playerstate PLAYERSTATE = new Playerstate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerstateRecord> getRecordType() {
        return PlayerstateRecord.class;
    }

    /**
     * The column <code>housinggame.playerstate.id</code>.
     */
    public final TableField<PlayerstateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.playerstate.playerround_id</code>.
     */
    public final TableField<PlayerstateRecord, Integer> PLAYERROUND_ID = createField(DSL.name("playerround_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.playerstate.timestamp</code>.
     */
    public final TableField<PlayerstateRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>housinggame.playerstate.player_state</code>.
     */
    public final TableField<PlayerstateRecord, String> PLAYER_STATE = createField(DSL.name("player_state"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>housinggame.playerstate.content</code>.
     */
    public final TableField<PlayerstateRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    private Playerstate(Name alias, Table<PlayerstateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Playerstate(Name alias, Table<PlayerstateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.playerstate</code> table reference
     */
    public Playerstate(String alias) {
        this(DSL.name(alias), PLAYERSTATE);
    }

    /**
     * Create an aliased <code>housinggame.playerstate</code> table reference
     */
    public Playerstate(Name alias) {
        this(alias, PLAYERSTATE);
    }

    /**
     * Create a <code>housinggame.playerstate</code> table reference
     */
    public Playerstate() {
        this(DSL.name("playerstate"), null);
    }

    public <O extends Record> Playerstate(Table<O> child, ForeignKey<O, PlayerstateRecord> key) {
        super(child, key, PLAYERSTATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYERSTATE_FK_PLAYERSTATE_PLAYERROUND1_IDX);
    }

    @Override
    public Identity<PlayerstateRecord, Integer> getIdentity() {
        return (Identity<PlayerstateRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerstateRecord> getPrimaryKey() {
        return Keys.KEY_PLAYERSTATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerstateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYERSTATE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerstateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYERSTATE_PLAYERROUND1);
    }

    private transient Playerround _playerround;

    /**
     * Get the implicit join path to the <code>housinggame.playerround</code>
     * table.
     */
    public Playerround playerround() {
        if (_playerround == null)
            _playerround = new Playerround(this, Keys.FK_PLAYERSTATE_PLAYERROUND1);

        return _playerround;
    }

    @Override
    public Playerstate as(String alias) {
        return new Playerstate(DSL.name(alias), this);
    }

    @Override
    public Playerstate as(Name alias) {
        return new Playerstate(alias, this);
    }

    @Override
    public Playerstate as(Table<?> alias) {
        return new Playerstate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Playerstate rename(String name) {
        return new Playerstate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playerstate rename(Name name) {
        return new Playerstate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Playerstate rename(Table<?> name) {
        return new Playerstate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
