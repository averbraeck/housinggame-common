/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.MeasurecategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurecategory extends TableImpl<MeasurecategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.measurecategory</code>
     */
    public static final Measurecategory MEASURECATEGORY = new Measurecategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurecategoryRecord> getRecordType() {
        return MeasurecategoryRecord.class;
    }

    /**
     * The column <code>housinggame.measurecategory.id</code>.
     */
    public final TableField<MeasurecategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.measurecategory.name</code>.
     */
    public final TableField<MeasurecategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>housinggame.measurecategory.description</code>.
     */
    public final TableField<MeasurecategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>housinggame.measurecategory.explanation</code>.
     */
    public final TableField<MeasurecategoryRecord, String> EXPLANATION = createField(DSL.name("explanation"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    private Measurecategory(Name alias, Table<MeasurecategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measurecategory(Name alias, Table<MeasurecategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.measurecategory</code> table
     * reference
     */
    public Measurecategory(String alias) {
        this(DSL.name(alias), MEASURECATEGORY);
    }

    /**
     * Create an aliased <code>housinggame.measurecategory</code> table
     * reference
     */
    public Measurecategory(Name alias) {
        this(alias, MEASURECATEGORY);
    }

    /**
     * Create a <code>housinggame.measurecategory</code> table reference
     */
    public Measurecategory() {
        this(DSL.name("measurecategory"), null);
    }

    public <O extends Record> Measurecategory(Table<O> child, ForeignKey<O, MeasurecategoryRecord> key) {
        super(child, key, MEASURECATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public Identity<MeasurecategoryRecord, Integer> getIdentity() {
        return (Identity<MeasurecategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeasurecategoryRecord> getPrimaryKey() {
        return Keys.KEY_MEASURECATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MeasurecategoryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MEASURECATEGORY_ID_UNIQUE);
    }

    @Override
    public Measurecategory as(String alias) {
        return new Measurecategory(DSL.name(alias), this);
    }

    @Override
    public Measurecategory as(Name alias) {
        return new Measurecategory(alias, this);
    }

    @Override
    public Measurecategory as(Table<?> alias) {
        return new Measurecategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurecategory rename(String name) {
        return new Measurecategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurecategory rename(Name name) {
        return new Measurecategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurecategory rename(Table<?> name) {
        return new Measurecategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
