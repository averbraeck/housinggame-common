/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.HousegroupRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Housegroup extends TableImpl<HousegroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.housegroup</code>
     */
    public static final Housegroup HOUSEGROUP = new Housegroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HousegroupRecord> getRecordType() {
        return HousegroupRecord.class;
    }

    /**
     * The column <code>housinggame.housegroup.id</code>.
     */
    public final TableField<HousegroupRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.housegroup.original_price</code>.
     */
    public final TableField<HousegroupRecord, Integer> ORIGINAL_PRICE = createField(DSL.name("original_price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.damage_reduction</code>.
     */
    public final TableField<HousegroupRecord, Integer> DAMAGE_REDUCTION = createField(DSL.name("damage_reduction"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.market_value</code>.
     */
    public final TableField<HousegroupRecord, Integer> MARKET_VALUE = createField(DSL.name("market_value"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.last_sold_price</code>.
     */
    public final TableField<HousegroupRecord, Integer> LAST_SOLD_PRICE = createField(DSL.name("last_sold_price"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.house_satisfaction</code>.
     */
    public final TableField<HousegroupRecord, Integer> HOUSE_SATISFACTION = createField(DSL.name("house_satisfaction"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.status</code>.
     */
    public final TableField<HousegroupRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.house_id</code>.
     */
    public final TableField<HousegroupRecord, Integer> HOUSE_ID = createField(DSL.name("house_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.group_id</code>.
     */
    public final TableField<HousegroupRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.housegroup.owner_id</code>.
     */
    public final TableField<HousegroupRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private Housegroup(Name alias, Table<HousegroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private Housegroup(Name alias, Table<HousegroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.housegroup</code> table reference
     */
    public Housegroup(String alias) {
        this(DSL.name(alias), HOUSEGROUP);
    }

    /**
     * Create an aliased <code>housinggame.housegroup</code> table reference
     */
    public Housegroup(Name alias) {
        this(alias, HOUSEGROUP);
    }

    /**
     * Create a <code>housinggame.housegroup</code> table reference
     */
    public Housegroup() {
        this(DSL.name("housegroup"), null);
    }

    public <O extends Record> Housegroup(Table<O> child, ForeignKey<O, HousegroupRecord> key) {
        super(child, key, HOUSEGROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOUSEGROUP_FK_HOUSEGROUP_GROUP1_IDX, Indexes.HOUSEGROUP_FK_HOUSEROUND_HOUSE1_IDX, Indexes.HOUSEGROUP_FK_HOUSEROUND_PLAYER1_IDX);
    }

    @Override
    public Identity<HousegroupRecord, Integer> getIdentity() {
        return (Identity<HousegroupRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HousegroupRecord> getPrimaryKey() {
        return Keys.KEY_HOUSEGROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<HousegroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HOUSEGROUP_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HousegroupRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_HOUSEROUND_HOUSE1, Keys.FK_HOUSEGROUP_GROUP1, Keys.FK_HOUSEROUND_PLAYER1);
    }

    private transient House _house;
    private transient Group _group;
    private transient Player _player;

    /**
     * Get the implicit join path to the <code>housinggame.house</code> table.
     */
    public House house() {
        if (_house == null)
            _house = new House(this, Keys.FK_HOUSEROUND_HOUSE1);

        return _house;
    }

    /**
     * Get the implicit join path to the <code>housinggame.group</code> table.
     */
    public Group group() {
        if (_group == null)
            _group = new Group(this, Keys.FK_HOUSEGROUP_GROUP1);

        return _group;
    }

    /**
     * Get the implicit join path to the <code>housinggame.player</code> table.
     */
    public Player player() {
        if (_player == null)
            _player = new Player(this, Keys.FK_HOUSEROUND_PLAYER1);

        return _player;
    }

    @Override
    public Housegroup as(String alias) {
        return new Housegroup(DSL.name(alias), this);
    }

    @Override
    public Housegroup as(Name alias) {
        return new Housegroup(alias, this);
    }

    @Override
    public Housegroup as(Table<?> alias) {
        return new Housegroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Housegroup rename(String name) {
        return new Housegroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Housegroup rename(Name name) {
        return new Housegroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Housegroup rename(Table<?> name) {
        return new Housegroup(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, Integer, Integer, Integer, String, Integer, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
