/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.FacilitatorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Facilitator extends TableImpl<FacilitatorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.facilitator</code>
     */
    public static final Facilitator FACILITATOR = new Facilitator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacilitatorRecord> getRecordType() {
        return FacilitatorRecord.class;
    }

    /**
     * The column <code>housinggame.facilitator.id</code>.
     */
    public final TableField<FacilitatorRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.facilitator.name</code>.
     */
    public final TableField<FacilitatorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>housinggame.facilitator.user_id</code>.
     */
    public final TableField<FacilitatorRecord, UInteger> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private Facilitator(Name alias, Table<FacilitatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Facilitator(Name alias, Table<FacilitatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.facilitator</code> table reference
     */
    public Facilitator(String alias) {
        this(DSL.name(alias), FACILITATOR);
    }

    /**
     * Create an aliased <code>housinggame.facilitator</code> table reference
     */
    public Facilitator(Name alias) {
        this(alias, FACILITATOR);
    }

    /**
     * Create a <code>housinggame.facilitator</code> table reference
     */
    public Facilitator() {
        this(DSL.name("facilitator"), null);
    }

    public <O extends Record> Facilitator(Table<O> child, ForeignKey<O, FacilitatorRecord> key) {
        super(child, key, FACILITATOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FACILITATOR_FK_FACILITATOR_USER1_IDX);
    }

    @Override
    public Identity<FacilitatorRecord, UInteger> getIdentity() {
        return (Identity<FacilitatorRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<FacilitatorRecord> getPrimaryKey() {
        return Keys.KEY_FACILITATOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<FacilitatorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_FACILITATOR_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<FacilitatorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FACILITATOR_USER1);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>housinggame.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_FACILITATOR_USER1);

        return _user;
    }

    @Override
    public Facilitator as(String alias) {
        return new Facilitator(DSL.name(alias), this);
    }

    @Override
    public Facilitator as(Name alias) {
        return new Facilitator(alias, this);
    }

    @Override
    public Facilitator as(Table<?> alias) {
        return new Facilitator(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Facilitator rename(String name) {
        return new Facilitator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Facilitator rename(Name name) {
        return new Facilitator(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Facilitator rename(Table<?> name) {
        return new Facilitator(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, String, UInteger> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UInteger, ? super String, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UInteger, ? super String, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
