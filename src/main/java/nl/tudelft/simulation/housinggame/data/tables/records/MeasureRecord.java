/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables.records;


import nl.tudelft.simulation.housinggame.data.tables.Measure;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasureRecord extends UpdatableRecordImpl<MeasureRecord> implements Record5<Integer, Double, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>housinggame.measure.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>housinggame.measure.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>housinggame.measure.value</code>.
     */
    public void setValue(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>housinggame.measure.value</code>.
     */
    public Double getValue() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>housinggame.measure.playerround_id</code>.
     */
    public void setPlayerroundId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>housinggame.measure.playerround_id</code>.
     */
    public Integer getPlayerroundId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>housinggame.measure.measuretype_id</code>.
     */
    public void setMeasuretypeId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>housinggame.measure.measuretype_id</code>.
     */
    public Integer getMeasuretypeId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>housinggame.measure.house_id</code>.
     */
    public void setHouseId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>housinggame.measure.house_id</code>.
     */
    public Integer getHouseId() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Double, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Double, Integer, Integer, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Measure.MEASURE.ID;
    }

    @Override
    public Field<Double> field2() {
        return Measure.MEASURE.VALUE;
    }

    @Override
    public Field<Integer> field3() {
        return Measure.MEASURE.PLAYERROUND_ID;
    }

    @Override
    public Field<Integer> field4() {
        return Measure.MEASURE.MEASURETYPE_ID;
    }

    @Override
    public Field<Integer> field5() {
        return Measure.MEASURE.HOUSE_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getValue();
    }

    @Override
    public Integer component3() {
        return getPlayerroundId();
    }

    @Override
    public Integer component4() {
        return getMeasuretypeId();
    }

    @Override
    public Integer component5() {
        return getHouseId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getValue();
    }

    @Override
    public Integer value3() {
        return getPlayerroundId();
    }

    @Override
    public Integer value4() {
        return getMeasuretypeId();
    }

    @Override
    public Integer value5() {
        return getHouseId();
    }

    @Override
    public MeasureRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MeasureRecord value2(Double value) {
        setValue(value);
        return this;
    }

    @Override
    public MeasureRecord value3(Integer value) {
        setPlayerroundId(value);
        return this;
    }

    @Override
    public MeasureRecord value4(Integer value) {
        setMeasuretypeId(value);
        return this;
    }

    @Override
    public MeasureRecord value5(Integer value) {
        setHouseId(value);
        return this;
    }

    @Override
    public MeasureRecord values(Integer value1, Double value2, Integer value3, Integer value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasureRecord
     */
    public MeasureRecord() {
        super(Measure.MEASURE);
    }

    /**
     * Create a detached, initialised MeasureRecord
     */
    public MeasureRecord(Integer id, Double value, Integer playerroundId, Integer measuretypeId, Integer houseId) {
        super(Measure.MEASURE);

        setId(id);
        setValue(value);
        setPlayerroundId(playerroundId);
        setMeasuretypeId(measuretypeId);
        setHouseId(houseId);
        resetChangedOnNotNull();
    }
}
