/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables.records;


import nl.tudelft.simulation.housinggame.data.tables.Measure;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasureRecord extends UpdatableRecordImpl<MeasureRecord> implements Record4<UInteger, Double, UInteger, UInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>housinggame.measure.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>housinggame.measure.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>housinggame.measure.value</code>.
     */
    public void setValue(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>housinggame.measure.value</code>.
     */
    public Double getValue() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>housinggame.measure.playerround_id</code>.
     */
    public void setPlayerroundId(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>housinggame.measure.playerround_id</code>.
     */
    public UInteger getPlayerroundId() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>housinggame.measure.measuretype_id</code>.
     */
    public void setMeasuretypeId(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>housinggame.measure.measuretype_id</code>.
     */
    public UInteger getMeasuretypeId() {
        return (UInteger) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UInteger, Double, UInteger, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UInteger, Double, UInteger, UInteger> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Measure.MEASURE.ID;
    }

    @Override
    public Field<Double> field2() {
        return Measure.MEASURE.VALUE;
    }

    @Override
    public Field<UInteger> field3() {
        return Measure.MEASURE.PLAYERROUND_ID;
    }

    @Override
    public Field<UInteger> field4() {
        return Measure.MEASURE.MEASURETYPE_ID;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getValue();
    }

    @Override
    public UInteger component3() {
        return getPlayerroundId();
    }

    @Override
    public UInteger component4() {
        return getMeasuretypeId();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getValue();
    }

    @Override
    public UInteger value3() {
        return getPlayerroundId();
    }

    @Override
    public UInteger value4() {
        return getMeasuretypeId();
    }

    @Override
    public MeasureRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public MeasureRecord value2(Double value) {
        setValue(value);
        return this;
    }

    @Override
    public MeasureRecord value3(UInteger value) {
        setPlayerroundId(value);
        return this;
    }

    @Override
    public MeasureRecord value4(UInteger value) {
        setMeasuretypeId(value);
        return this;
    }

    @Override
    public MeasureRecord values(UInteger value1, Double value2, UInteger value3, UInteger value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasureRecord
     */
    public MeasureRecord() {
        super(Measure.MEASURE);
    }

    /**
     * Create a detached, initialised MeasureRecord
     */
    public MeasureRecord(UInteger id, Double value, UInteger playerroundId, UInteger measuretypeId) {
        super(Measure.MEASURE);

        setId(id);
        setValue(value);
        setPlayerroundId(playerroundId);
        setMeasuretypeId(measuretypeId);
        resetChangedOnNotNull();
    }
}
