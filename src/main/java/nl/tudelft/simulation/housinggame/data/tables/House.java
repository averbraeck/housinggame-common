/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Housinggame;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.HouseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class House extends TableImpl<HouseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>housinggame.house</code>
     */
    public static final House HOUSE = new House();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseRecord> getRecordType() {
        return HouseRecord.class;
    }

    /**
     * The column <code>housinggame.house.id</code>.
     */
    public final TableField<HouseRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>housinggame.house.price</code>.
     */
    public final TableField<HouseRecord, UInteger> PRICE = createField(DSL.name("price"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.house.address</code>.
     */
    public final TableField<HouseRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>housinggame.house.available_round</code>.
     */
    public final TableField<HouseRecord, UInteger> AVAILABLE_ROUND = createField(DSL.name("available_round"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>housinggame.house.description</code>.
     */
    public final TableField<HouseRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>housinggame.house.rating</code>.
     */
    public final TableField<HouseRecord, UInteger> RATING = createField(DSL.name("rating"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>housinggame.house.initial_pluvial_protection</code>.
     */
    public final TableField<HouseRecord, Integer> INITIAL_PLUVIAL_PROTECTION = createField(DSL.name("initial_pluvial_protection"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.house.initial_fluvial_protection</code>.
     */
    public final TableField<HouseRecord, Integer> INITIAL_FLUVIAL_PROTECTION = createField(DSL.name("initial_fluvial_protection"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>housinggame.house.community_id</code>.
     */
    public final TableField<HouseRecord, UInteger> COMMUNITY_ID = createField(DSL.name("community_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private House(Name alias, Table<HouseRecord> aliased) {
        this(alias, aliased, null);
    }

    private House(Name alias, Table<HouseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>housinggame.house</code> table reference
     */
    public House(String alias) {
        this(DSL.name(alias), HOUSE);
    }

    /**
     * Create an aliased <code>housinggame.house</code> table reference
     */
    public House(Name alias) {
        this(alias, HOUSE);
    }

    /**
     * Create a <code>housinggame.house</code> table reference
     */
    public House() {
        this(DSL.name("house"), null);
    }

    public <O extends Record> House(Table<O> child, ForeignKey<O, HouseRecord> key) {
        super(child, key, HOUSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Housinggame.HOUSINGGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HOUSE_FK_HOUSE_COMMUNITY1_IDX);
    }

    @Override
    public Identity<HouseRecord, UInteger> getIdentity() {
        return (Identity<HouseRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<HouseRecord> getPrimaryKey() {
        return Keys.KEY_HOUSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<HouseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HOUSE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<HouseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_HOUSE_COMMUNITY1);
    }

    private transient Community _community;

    /**
     * Get the implicit join path to the <code>housinggame.community</code>
     * table.
     */
    public Community community() {
        if (_community == null)
            _community = new Community(this, Keys.FK_HOUSE_COMMUNITY1);

        return _community;
    }

    @Override
    public House as(String alias) {
        return new House(DSL.name(alias), this);
    }

    @Override
    public House as(Name alias) {
        return new House(alias, this);
    }

    @Override
    public House as(Table<?> alias) {
        return new House(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(String name) {
        return new House(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(Name name) {
        return new House(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(Table<?> name) {
        return new House(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UInteger, UInteger, String, UInteger, String, UInteger, Integer, Integer, UInteger> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super UInteger, ? super UInteger, ? super String, ? super UInteger, ? super String, ? super UInteger, ? super Integer, ? super Integer, ? super UInteger, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super UInteger, ? super UInteger, ? super String, ? super UInteger, ? super String, ? super UInteger, ? super Integer, ? super Integer, ? super UInteger, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
